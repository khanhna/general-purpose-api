// <auto-generated />
using System;
using GeneralPurpose.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeneralPurpose.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251004105423_AddImageProcessConfig")]
    partial class AddImageProcessConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.AppSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppSystems", (string)null);
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.ImageCompositionConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppSystemId")
                        .HasColumnType("integer");

                    b.Property<string>("BlendMode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("Feather")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("InvertThreshold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Opacity")
                        .HasColumnType("numeric");

                    b.Property<int>("Threshold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppSystemId");

                    b.ToTable("ImageCompositionConfigs", (string)null);
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.ImageVintageProcessConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlueAdjustment")
                        .HasColumnType("integer");

                    b.Property<decimal>("Blur")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Brightness")
                        .HasColumnType("numeric");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal>("Contrast")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Dust")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Fade")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Grain")
                        .HasColumnType("numeric");

                    b.Property<int>("GreenAdjustment")
                        .HasColumnType("integer");

                    b.Property<int>("Hairs")
                        .HasColumnType("integer");

                    b.Property<int>("RedAdjustment")
                        .HasColumnType("integer");

                    b.Property<int>("Scratches")
                        .HasColumnType("integer");

                    b.Property<decimal>("TintIntensity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Vignette")
                        .HasColumnType("numeric");

                    b.Property<int?>("WorkingUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkingUnitId")
                        .IsUnique();

                    b.ToTable("ImageVintageProcessConfigs", (string)null);
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordAt")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkingUnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecordAt");

                    b.HasIndex("WorkingUnitId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.WorkingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FaceSlimmingEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Identifier")
                        .HasMaxLength(32)
                        .HasColumnType("char(32)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("SkinRetouchEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("SystemId")
                        .HasColumnType("integer");

                    b.Property<bool>("VintageProcessEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Identifier");

                    b.HasIndex("SystemId");

                    b.ToTable("WorkingUnits", (string)null);
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.ImageCompositionConfig", b =>
                {
                    b.HasOne("GeneralPurpose.Domain.Entities.AppSystem", "AppSystem")
                        .WithMany("ImageCompositionConfigs")
                        .HasForeignKey("AppSystemId");

                    b.Navigation("AppSystem");
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.ImageVintageProcessConfig", b =>
                {
                    b.HasOne("GeneralPurpose.Domain.Entities.WorkingUnit", "WorkingUnit")
                        .WithOne("ImageVintageProcessConfig")
                        .HasForeignKey("GeneralPurpose.Domain.Entities.ImageVintageProcessConfig", "WorkingUnitId");

                    b.Navigation("WorkingUnit");
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("GeneralPurpose.Domain.Entities.WorkingUnit", "WorkingUnit")
                        .WithMany("Transactions")
                        .HasForeignKey("WorkingUnitId");

                    b.Navigation("WorkingUnit");
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.WorkingUnit", b =>
                {
                    b.HasOne("GeneralPurpose.Domain.Entities.AppSystem", "AppSystem")
                        .WithMany("WorkingUnits")
                        .HasForeignKey("SystemId");

                    b.Navigation("AppSystem");
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.AppSystem", b =>
                {
                    b.Navigation("ImageCompositionConfigs");

                    b.Navigation("WorkingUnits");
                });

            modelBuilder.Entity("GeneralPurpose.Domain.Entities.WorkingUnit", b =>
                {
                    b.Navigation("ImageVintageProcessConfig");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
